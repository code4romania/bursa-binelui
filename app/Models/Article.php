<?php

declare(strict_types=1);

namespace App\Models;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Support\Str;
use Spatie\Image\Manipulations;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;
use Spatie\MediaLibrary\MediaCollections\Models\Media;

class Article extends Model  implements HasMedia
{
    use HasFactory;
    use InteractsWithMedia;

    protected $fillable = [
        'title',
        'slug',
        'content',
        'is_active',
        'article_category_id',
        'author',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function ($article) {
            $article->slug = Str::slug($article->title);
        });
    }

    protected $casts = [
        'created_at' => 'date:y-m-d h:i',
        'updated_at' => 'date:y-m-d h:i',
    ];
    protected $with = ['media'];
    protected $appends = ['cover_image'];

    public function registerMediaConversions(Media $media = null): void
    {
        $this
            ->addMediaConversion('preview')
            ->fit(Manipulations::FIT_CROP, 300, 300)
            ->nonQueued();
    }

    public function category(): BelongsTo
    {
        return $this->belongsTo(ArticleCategory::class, 'article_category_id', 'id');
    }

    public function scopeActive(Builder $query): Builder
    {
        return $query->where('is_active', true);
    }

    public function getCoverImageAttribute(): string
    {
        return $this->getFirstMediaUrl('cover', 'preview') ?? '';
    }

    public function relatedArticles(): Builder
    {
        return self::active()
            ->where('article_category_id', $this->article_category_id)
            ->where('id', '!=', $this->id)
            ->limit(3);
    }

}
